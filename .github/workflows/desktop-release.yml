name: Create Desktop Release

on:
  push:
    tags:
      - 'release-desktop-*'  # Trigger for tags like release-desktop-v1.0.0

jobs:
  snapshot:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'  # Use your required Java version
          distribution: 'temurin'

      - uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true
          cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}

      - name: Cache KMP tooling
        uses: actions/cache@v4
        with:
          path: |
            ~/.konan
          key: ${{ runner.os }}-v1-${{ hashFiles('*.versions.toml') }}

      - name: Build for ${{ matrix.os }}
        run: |
          # Build the distribution for the specific OS
          ./gradlew packageDistributionForCurrentOS

      - name: Upload artifact for ${{ matrix.os }}
        run: |
          # Find the binary based on the OS
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            binary_path="composeApp/build/compose/binaries/main/dmg"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            binary_path="composeApp/build/compose/binaries/main/windows"
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            binary_path="composeApp/build/compose/binaries/main/linux"
          fi
          
          # Get the tag version
          tag_version="${GITHUB_REF#refs/tags/}"
          
          # Upload the binary as an artifact
          echo "Uploading ${binary_path} for ${matrix.os} to GitHub releases"
          gh release create "$tag_version" "$binary_path" --title "Release $tag_version" --notes "Release notes for $tag_version"

      - name: Get Release Notes
        id: release_notes
        run: |
          # Extract the previous release tag to generate release notes
          previous_tag=$(git describe --tags --abbrev=0)
          current_tag="${GITHUB_REF#refs/tags/}"
          
          # If no previous release exists, use a default message
          if [ -z "$previous_tag" ]; then
            echo "No previous release found, skipping commit history generation."
            echo "Release notes: First release!" > release_notes.txt
          else
          # Get the commit messages between the previous release and the current one
            echo "Generating release notes from commits between $previous_tag and $current_tag"
            git log $previous_tag..$current_tag --oneline --no-merges > release_notes.txt
          fi

      - name: Upload Release Artifact for ${{ matrix.os }}
        run: |
          # Upload the binary as an artifact
          echo "Uploading ${binary_path} for ${matrix.os} to GitHub releases"
          gh release create "$current_tag" "$binary_path" --title "Release $current_tag" --notes "$(cat release_notes.txt)"

      - name: Upload the release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.binary_path }}  # This will use the path determined above
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
